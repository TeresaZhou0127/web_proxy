DESIGN DISCUSSION

1. The overall design of our project is to use a consumer and producer model.
   A consumer will deal with the request from the client and we also include
   a buffer to contain the connection information between the client and the 
   server. When a HTTP transaction arrives, we first check that if the buffer 
   is already full or not. If it is already full, we will wait until it sends 
   signals saying it is available again. But if it is still available, we 
   will add the transaction into the buffer and the consumer thread will read 
   and process the transaction information from the buffer. After that, it 
   will call our funciton "proc_request" to further deal with that info. 
   Our function "proc_request" first decodes the request message from the 
   client, then foward the request to the server and then sends the response 
   back to the client, finishing the service of a HTTP transaction. 

2. We did not change the first line of the request message. In our function
   "proc_request", we just read the request line by line. For the first line,
   we just separate it into three parts: "method", "URL" and "version". 
   We will check if each part is valid to be processed as a request message. 
   If it is, we will connect the server and if it is not, an error message 
   will be sent. 

3. When we process the request message, we skip the headers "Connection", "Keep
   -Alive" and "Proxy-Connection". Because these headers are not supported by 
   our proxy, we have to strip them to prevent failures of loading web pages. 
   Also, we add "Connection: close" to the headers to help close the connection.

4. We first use the function "rio_readnb" to read results from the server line 
   by line. If the result is less than 0. then send an error message saying 
   "Error reading response from end server". If the results is larger than 0, 
   we then use the function "rio_writen" to check whether the response from 
   the server can be sent back to the client. If the results is less than 0, 
   we send another error message saying "Error sending response to client";
   otherwise, we write back the response message to the clint. 

6. We use 10 threads to implement our concurrency. In order to deal with 
   multiple requests concurrently, we implement multiple threads, each 
   handling one request. However, considering creating too many threads can
   be expensive so we choose a number that is enough for our proxy to handle 
   multiple requests concurrently but also will not cost too much. As a result,
   we chose 10 as our final number. 

7. We first use the function "create_log_entry" to get the log_msg. We then use 
   the function "fprintf" to send the log_msg to the our logger and last use 
   "fflush" to make sure that everything in the message has been written to the 
   log file. 

8. When each consumer thread wants to process the request given by the client,
   in our "consumer" function, we make sure that before we pop off a request 
   from our buffer, we are going to lock by using "Pthread_mutex_lock" and 
   unlock until the request is fully processed and the log message log_msg
   has been successfully loaded into the log file. By using locks, we can 
   ensure atomicity when writing to log file. 

9. We open the log file after we start all our threads. We close the log file 
   after all of our threads finish processing. 
